// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
let allNumbers = [];
const HISTORY_KEY = "phoneNumberHistory";
let currentPage = 1;
const itemsPerPage = 10;
let currentFilter = 'all';


// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
window.addEventListener("DOMContentLoaded", () => {
  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–º—É
  if (localStorage.getItem("theme") === "dark") {
    document.body.classList.add("dark-mode");
  }

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
  document.getElementById('prevPage').addEventListener('click', () => {
    if (currentPage > 1) {
      currentPage--;
      renderList();
    }
  });

  document.getElementById('nextPage').addEventListener('click', () => {
    const totalPages = Math.ceil(allNumbers.length / itemsPerPage);
    if (currentPage < totalPages) {
      currentPage++;
      renderList();
    }
  });

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º
  const historyNumbers = loadHistory();
  if (historyNumbers.length > 0) {
    allNumbers = historyNumbers;
    renderList();
  }
});

// –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ç–µ–º—ã
document.getElementById("themeToggle").addEventListener("click", () => {
  document.body.classList.toggle("dark-mode");
  localStorage.setItem("theme", document.body.classList.contains("dark-mode") ? "dark" : "light");
});

// –§—É–Ω–∫—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã —Å localStorage
function loadStatus() {
  try {
    return JSON.parse(localStorage.getItem("numberStatus")) || {};
  } catch {
    return {};
  }
}

function saveStatus(status) {
  localStorage.setItem("numberStatus", JSON.stringify(status));
}

function saveToHistory(numbers) {
  let history = JSON.parse(localStorage.getItem(HISTORY_KEY)) || [];
  numbers.forEach(num => {
    if (!history.includes(num)) {
      history.push(num);
    }
  });
  localStorage.setItem(HISTORY_KEY, JSON.stringify(history));
}

function loadHistory() {
  try {
    return JSON.parse(localStorage.getItem(HISTORY_KEY)) || [];
  } catch {
    return [];
  }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –Ω–æ–º–µ—Ä–∞
function updateStatus(number, state) {
  const status = loadStatus();
  status[number] = state;
  saveStatus(status);
  renderList();
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤
// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤ —Å —É—á–µ—Ç–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–∞
function generatePhoneNumbers(count) {
  const prefix = document.getElementById("prefix").value.trim();
  const quantity = parseInt(count);
  const rangeStart = parseInt(document.getElementById("rangeStart").value);
  const rangeEnd = parseInt(document.getElementById("rangeEnd").value);

  if (!/^7\d{0,9}$/.test(prefix)) {
    alert("–ü—Ä–µ—Ñ–∏–∫—Å –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å '7' –∏ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∞–∫—Å–∏–º—É–º 10 —Ü–∏—Ñ—Ä.");
    return;
  }

  if (isNaN(quantity) || quantity < 1 || quantity > 999) {
    alert("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ–º–µ—Ä–æ–≤ (1‚Äì999).");
    return;
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏–∞–ø–∞–∑–æ–Ω–∞, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω
  let useRange = false;
  if (!isNaN(rangeStart) && !isNaN(rangeEnd)) {
    if (rangeStart >= rangeEnd) {
      alert("–ù–∞—á–∞–ª–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–µ–Ω—å—à–µ –∫–æ–Ω—Ü–∞");
      return;
    }
    if (rangeStart < 0 || rangeEnd > 9999) {
      alert("–î–∏–∞–ø–∞–∑–æ–Ω –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–µ–∂–¥—É 0000 –∏ 9999");
      return;
    }
    useRange = true;
  }

  const missingDigits = 11 - prefix.length;
  const existingNumbers = new Set(loadHistory());
  const newNumbers = new Set();

  if (useRange) {
    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ
    const rangeSize = rangeEnd - rangeStart + 1;
    
    if (quantity > rangeSize) {
      alert(`–ó–∞–ø—Ä–æ—à–µ–Ω–æ ${quantity} –Ω–æ–º–µ—Ä–æ–≤, –Ω–æ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ —Ç–æ–ª—å–∫–æ ${rangeSize} –≤–æ–∑–º–æ–∂–Ω—ã—Ö –∫–æ–º–±–∏–Ω–∞—Ü–∏–π.`);
      return;
    }
    
    // –°–æ–∑–¥–∞–µ–º –º–∞—Å—Å–∏–≤ –≤—Å–µ—Ö —á–∏—Å–µ–ª –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –∏ –ø–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º
    const rangeNumbers = [];
    for (let i = rangeStart; i <= rangeEnd; i++) {
      rangeNumbers.push(String(i).padStart(missingDigits, '0'));
    }
    shuffleArray(rangeNumbers);
    
    // –ë–µ—Ä–µ–º –Ω—É–∂–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑ –ø–µ—Ä–µ–º–µ—à–∞–Ω–Ω–æ–≥–æ –º–∞—Å—Å–∏–≤–∞
    for (let i = 0; i < Math.min(quantity, rangeNumbers.length); i++) {
      const fullNum = prefix + rangeNumbers[i];
      if (!existingNumbers.has(fullNum)) {
        newNumbers.add(fullNum);
      }
    }
  } else {
    // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è (–∫–∞–∫ –±—ã–ª–æ —Ä–∞–Ω—å—à–µ)
    const totalPossible = Math.pow(10, missingDigits);
    const allPossibleSuffixes = [];
    
    for (let i = 0; i < totalPossible; i++) {
      allPossibleSuffixes.push(String(i).padStart(missingDigits, '0'));
    }
    
    shuffleArray(allPossibleSuffixes);
    
    if (quantity >= totalPossible) {
      for (const suffix of allPossibleSuffixes) {
        const fullNum = prefix + suffix;
        if (!existingNumbers.has(fullNum)) {
          newNumbers.add(fullNum);
        }
      }
    } else {
      let added = 0;
      for (const suffix of allPossibleSuffixes) {
        if (added >= quantity) break;
        const fullNum = prefix + suffix;
        if (!existingNumbers.has(fullNum)) {
          newNumbers.add(fullNum);
          added++;
        }
      }
    }
  }

  if (newNumbers.size === 0) {
    alert("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—ã–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –Ω–æ–º–µ—Ä–∞. –í–æ–∑–º–æ–∂–Ω–æ, –≤—Å–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã.");
    return;
  }

  allNumbers = Array.from(newNumbers);
  shuffleArray(allNumbers);
  
  saveToHistory(allNumbers);
  currentPage = 1;
  renderList();

  if (quantity > newNumbers.size) {
    alert(`–ó–∞–ø—Ä–æ—à–µ–Ω–æ: ${quantity}\n–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ: ${newNumbers.size}\n–ù–µ —Ö–≤–∞—Ç–∏–ª–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–æ–º–±–∏–Ω–∞—Ü–∏–π.`);
  }
}
  
  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–º–µ—à–∏–≤–∞–Ω–∏—è –º–∞—Å—Å–∏–≤–∞ (–∞–ª–≥–æ—Ä–∏—Ç–º –§–∏—à–µ—Ä–∞-–ô–µ—Ç—Å–∞)
  function shuffleArray(array) {
    for (let i = array.length - 1; i > 0; i--) {
      const j = Math.floor(Math.random() * (i + 1));
      [array[i], array[j]] = [array[j], array[i]];
    }
  }
// –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å—é –∏—Å—Ç–æ—Ä–∏—é –Ω–æ–º–µ—Ä–æ–≤
function showAllHistoryNumbers() {
  const historyNumbers = loadHistory();
  if (historyNumbers.length === 0) {
    alert("–ò—Å—Ç–æ—Ä–∏—è –Ω–æ–º–µ—Ä–æ–≤ –ø—É—Å—Ç–∞.");
    return;
  }
  
  allNumbers = historyNumbers;
  currentPage = 1;
  currentFilter = 'all';
  renderList();
  
  alert(`–í—Å–µ–≥–æ –≤ –∏—Å—Ç–æ—Ä–∏–∏: ${historyNumbers.length} –Ω–æ–º–µ—Ä–æ–≤`);
}

// –û—Ç—Ä–∏—Å–æ–≤–∫–∞ —Å–ø–∏—Å–∫–∞ –Ω–æ–º–µ—Ä–æ–≤ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
function renderList(filter = currentFilter) {
  currentFilter = filter;
  const phoneList = document.getElementById("phoneList");
  const numberList = document.getElementById("numberList");
  const statusSummary = document.getElementById("statusSummary");

  phoneList.innerHTML = "";
  numberList.innerText = "";
  if (statusSummary) statusSummary.innerHTML = "";

  const status = loadStatus();
  const lines = [];
  const filteredNumbers = allNumbers.filter(num => {
    const s = status[num] || 'uncalled';
    return filter === 'all' || s === filter;
  });

  // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
  updatePaginationInfo(filteredNumbers.length);

  // –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä–∞ –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
  const startIndex = (currentPage - 1) * itemsPerPage;
  const endIndex = startIndex + itemsPerPage;
  const pageNumbers = filteredNumbers.slice(startIndex, endIndex);

  // –°—á–µ—Ç—á–∏–∫–∏ —Å—Ç–∞—Ç—É—Å–æ–≤
  const counters = {
    uncalled: 0,
    called: 0,
    alive: 0,
    bad: 0,
    cut: 0
  };
  

  allNumbers.forEach(num => {
    const s = status[num] || 'uncalled';
    counters[s] = (counters[s] || 0) + 1;
  });

  // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–≤–æ–¥–∫—É –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
  if (statusSummary) {
    statusSummary.innerHTML = `
  <span class="status-uncalled">–ù–µ –ø—Ä–æ–∑–≤–æ–Ω–µ–Ω–æ: ${counters.uncalled}</span>
  <span class="status-called">–ü—Ä–æ–∑–≤–æ–Ω–µ–Ω–æ: ${counters.called}</span>
  <span class="status-alive">–ñ–∏–≤—ã–µ: ${counters.alive}</span>
  <span class="status-bad">–ù–µ—Ä–∞–±–æ—á–∏–µ: ${counters.bad}</span>
  <span class="status-cut">–°—Ä–µ–∑–∞–Ω–Ω—ã–µ: ${counters.cut}</span>
`;

  }

  // –û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –Ω–æ–º–µ—Ä–∞ –Ω–∞ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
  pageNumbers.forEach(num => {
    const s = status[num] || 'uncalled';
    const div = document.createElement("div");
    div.className = `phone-item ${s === 'called' ? 'called' : s === 'bad' ? 'bad-number' : s === 'alive' ? 'alive-number' : s === 'cut' ? 'cut-number' : ''}`;
  
    // –¢–µ–∫—Å—Ç–æ–≤–∞—è –º–µ—Ç–∫–∞
    let labelText = "";
    // HTML –º–µ—Ç–∫–∞
    let labelHtml = "";
  
    if (s === "bad") {
      labelText = " (–Ω–µ—Ä–∞–±–æ—á–∏–π)";
      labelHtml = " (–Ω–µ—Ä–∞–±–æ—á–∏–π)";
    }
    if (s === "alive") {
      labelText = " (–∂–∏–≤–æ–π)";
      labelHtml = " ";
    }
    if (s === "called") {
      labelText = " (–∑–≤–æ–Ω–∏–ª–∏)";
      labelHtml = " (–∑–≤–æ–Ω–∏–ª–∏)";
    }
    if (s === "cut") {
      labelText = " (—Å—Ä–µ–∑)";
      labelHtml = " <span class='cut-label'>(—Å—Ä–µ–∑)</span>";
    }
  
    div.innerHTML = `
      <div class="number">
        <button class="copy-button" onclick="copyToClipboard('${num}')">üìã</button>
        <span>${num}</span> ${labelHtml}
      </div>
      <div class="buttons">
        <button class="call-button" onclick="callNumber('${num}')">üìû –ü–æ–∑–≤–æ–Ω–∏—Ç—å</button>
        <button class="bad-button" onclick="updateStatus('${num}', 'bad')">–ù–µ —Ä–∞–±–æ—á–∏–π</button>
        <button class="alive-button" onclick="updateStatus('${num}', 'alive')">–ù–µ –≤–∑—è–ª</button>
        <button class="cut-button" onclick="updateStatus('${num}', 'cut')">‚úÇÔ∏è –°—Ä–µ–∑</button>
      </div>
    `;
  
    phoneList.appendChild(div);
    lines.push(num + labelText); // –¢–û–õ–¨–ö–û —Ç–µ–∫—Å—Ç–æ–≤–∞—è –≤–µ—Ä—Å–∏—è
  });
  
  numberList.innerText = lines.join("\n");
  
}

  
// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
function updatePaginationInfo(totalFiltered) {
  const totalPages = Math.ceil(totalFiltered / itemsPerPage);
  document.getElementById('pageInfo').textContent = `–°—Ç—Ä–∞–Ω–∏—Ü–∞ ${currentPage} –∏–∑ ${totalPages}`;
  
  document.getElementById('prevPage').disabled = currentPage <= 1;
  document.getElementById('nextPage').disabled = currentPage >= totalPages || totalPages === 0;
}

// –ó–≤–æ–Ω–æ–∫ –ø–æ –Ω–æ–º–µ—Ä—É
function callNumber(number) {
    try {
      const link = document.createElement("a");
      link.href = "sip:" + number;
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
    } catch (e) {
      alert("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ SIP-–∑–≤–æ–Ω–∫–∞. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ MicroSIP —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.");
    }
  
    updateStatus(number, "called");
  
    // ‚úÖ –£–¥–∞–ª–∏–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ —É –≤—Å–µ—Ö –¥—Ä—É–≥–∏—Ö –Ω–æ–º–µ—Ä–æ–≤
    document.querySelectorAll(".phone-item").forEach(item => {
      item.classList.remove("calling-now");
    });
  
    // ‚úÖ –ù–∞–π–¥—ë–º –∏ –≤—ã–¥–µ–ª–∏–º —Ç–µ–∫—É—â–∏–π
    const matchingItem = Array.from(document.querySelectorAll(".phone-item"))
      .find(item => item.querySelector(".number span").textContent === number);
    
    if (matchingItem) {
      matchingItem.classList.add("calling-now");
    }
  }
  
// –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –Ω–æ–º–µ—Ä–æ–≤
function filterNumbers(state) {
  currentPage = 1;
  currentFilter = state;
  renderList(state);
}

// –û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏
function clearCallHistory() {
  if (confirm("–£–¥–∞–ª–∏—Ç—å –í–°–ï –¥–∞–Ω–Ω—ã–µ (–Ω–æ–º–µ—Ä–∞, —Å—Ç–∞—Ç—É—Å—ã, –∏—Å—Ç–æ—Ä–∏—é)?")) {
    localStorage.removeItem("numberStatus");
    localStorage.removeItem(HISTORY_KEY);
    allNumbers = [];
    currentPage = 1;
    document.getElementById("phoneList").innerHTML = "";
    document.getElementById("numberList").innerText = "";
    document.getElementById("statusSummary").innerHTML = "";
    updatePaginationInfo(0);
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç –≤ Excel
function exportToExcel() {
  if (typeof XLSX === 'undefined') {
      alert("–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±–Ω–æ–≤–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É.");
      return;
  }

  if (allNumbers.length === 0) {
      alert("–ù–µ—Ç –Ω–æ–º–µ—Ä–æ–≤ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞.");
      return;
  }

  const status = loadStatus();
  const data = allNumbers.map(num => ({
      "–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞": num,
      "–°—Ç–∞—Ç—É—Å": status[num] === 'called' ? '–ü–æ–∑–≤–æ–Ω–∏–ª–∏' : 
               status[num] === 'bad' ? '–ù–µ —Ä–∞–±–æ—á–∏–π' : 
               status[num] === 'alive' ? '–ñ–∏–≤–æ–π' : '–ù–µ –∑–≤–æ–Ω–∏–ª–∏'
  }));

  try {
      const worksheet = XLSX.utils.json_to_sheet(data);
      const workbook = XLSX.utils.book_new();
      XLSX.utils.book_append_sheet(workbook, worksheet, "–¢–µ–ª–µ—Ñ–æ–Ω–Ω—ã–µ –Ω–æ–º–µ—Ä–∞");
      XLSX.writeFile(workbook, "—Ç–µ–ª–µ—Ñ–æ–Ω–Ω—ã–µ_–Ω–æ–º–µ—Ä–∞.xlsx");
  } catch (error) {
      console.error("–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞:", error);
      alert("–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ: " + error.message);
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç –≤ TXT
function exportToTxt() {
  const status = loadStatus();
  const lines = allNumbers.map(num => {
    const s = status[num] || 'uncalled';
    let label = "";
    if (s === "bad") label = " (–Ω–µ—Ä–∞–±–æ—á–∏–π)";
    if (s === "alive") label = " (–∂–∏–≤–æ–π)";
    if (s === "called") label = " (–∑–≤–æ–Ω–∏–ª–∏)";
    return num + label;
  });

  if (lines.length === 0) {
    alert("–ù–µ—Ç –Ω–æ–º–µ—Ä–æ–≤ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞.");
    return;
  }

  const blob = new Blob([lines.join("\n")], { type: "text/plain;charset=utf-8" });
  const link = document.createElement("a");
  link.href = URL.createObjectURL(blob);
  link.download = "–Ω–æ–º–µ—Ä–∞.txt";
  document.body.appendChild(link);
  link.click();
  document.body.removeChild(link);
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑ TXT
function loadFromTxt() {
  const fileInput = document.getElementById("uploadTxt");
  const file = fileInput.files[0];
  if (!file) return;

  const reader = new FileReader();
  reader.onload = function (e) {
    const text = e.target.result;
    const lines = text.split(/\r?\n/).map(line => line.trim()).filter(Boolean);
    
    const status = loadStatus(); // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Å—Ç–∞—Ç—É—Å—ã
    let newNumbers = []; // –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–æ–≤—ã—Ö –Ω–æ–º–µ—Ä–æ–≤
    
    lines.forEach(line => {
      // –ò—â–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (—Ñ–æ—Ä–º–∞—Ç 7XXXXXXXXXX)
      const phoneMatch = line.match(/^(7\d{10})/);
      if (!phoneMatch) return;
      
      const phoneNumber = phoneMatch[1];
      newNumbers.push(phoneNumber);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –≤ —Å—Ç—Ä–æ–∫–µ
      if (line.includes("(–Ω–µ—Ä–∞–±–æ—á–∏–π)")) {
        status[phoneNumber] = "bad";
      } else if (line.includes("(–∂–∏–≤–æ–π)")) {
        status[phoneNumber] = "alive";
      } else if (line.includes("(–∑–≤–æ–Ω–∏–ª–∏)")) {
        status[phoneNumber] = "called";
      } else if (line.includes("(—Å—Ä–µ–∑)")) {
        status[phoneNumber] = "cut";
      }
      // –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –Ω–µ —É–∫–∞–∑–∞–Ω, –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å (–∏–ª–∏ 'uncalled' –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
    });

    if (newNumbers.length === 0) {
      alert("–ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –Ω–æ–º–µ—Ä–æ–≤ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤ –≤ —Ñ–æ—Ä–º–∞—Ç–µ 7XXXXXXXXXX");
      return;
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–µ –Ω–æ–º–µ—Ä–∞ –≤ –∏—Å—Ç–æ—Ä–∏—é
    saveToHistory(newNumbers);
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã
    saveStatus(status);
    
    allNumbers = newNumbers;
    currentPage = 1;
    renderList();
    alert(`–£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ ${newNumbers.length} –Ω–æ–º–µ—Ä–æ–≤ –∏–∑ TXT —Ñ–∞–π–ª–∞`);
  };
  reader.readAsText(file);
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑ Excel
function loadFromExcel() {
  const fileInput = document.getElementById("uploadExcel");
  const file = fileInput.files[0];
  if (!file) return;

  const reader = new FileReader();
  reader.onload = function(e) {
    try {
      const data = new Uint8Array(e.target.result);
      const workbook = XLSX.read(data, { type: 'array' });
      
      const firstSheet = workbook.Sheets[workbook.SheetNames[0]];
      const jsonData = XLSX.utils.sheet_to_json(firstSheet);
      
      const numbers = [];
      jsonData.forEach(row => {
        for (const key in row) {
          const value = String(row[key]).trim();
          if (/^7\d{10}$/.test(value)) {
            numbers.push(value);
            break;
          }
        }
      });

      if (numbers.length === 0) {
        alert("–ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –Ω–æ–º–µ—Ä–æ–≤ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤ –≤ —Ñ–æ—Ä–º–∞—Ç–µ 7XXXXXXXXXX");
        return;
      }

      allNumbers = numbers;
      saveToHistory(numbers);
      currentPage = 1;
      renderList();
      alert(`–£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ ${numbers.length} –Ω–æ–º–µ—Ä–æ–≤ –∏–∑ Excel —Ñ–∞–π–ª–∞`);

    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ Excel —Ñ–∞–π–ª–∞:", error);
      alert("–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ Excel —Ñ–∞–π–ª–∞: " + error.message);
    }
  };
  reader.readAsArrayBuffer(file);
}

// üîç –ü–æ–∏—Å–∫ –ø–æ –Ω–æ–º–µ—Ä—É
function searchPhoneNumber() {
    const input = document.getElementById('searchInput').value.trim();
    const phoneList = document.getElementById('phoneList');
    const items = phoneList.querySelectorAll('.phone-item');
  
    items.forEach(item => {
      const number = item.querySelector('.number span').textContent;
      if (number.includes(input)) {
        item.style.display = "";
      } else {
        item.style.display = "none";
      }
    });
  }
  
  /*–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ**/
  function copyToClipboard(text) {
    navigator.clipboard.writeText(text).then(() => {
      updateStatus(text, "called"); // üëà –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
      showCopyNotification(`–°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ: ${text}`);
    }).catch(err => {
      console.error('–û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è:', err);
      showCopyNotification("–û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è", true);
    });
  }
  
  
  function showCopyNotification(message, isError = false) {
    let notification = document.createElement("div");
    notification.className = `copy-notification ${isError ? 'error' : ''}`;
    notification.innerHTML = `‚úîÔ∏è ${message}`;
    document.body.appendChild(notification);
  
    setTimeout(() => {
      notification.classList.add("show");
    }, 10); // –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏
  
    setTimeout(() => {
      notification.classList.remove("show");
      setTimeout(() => document.body.removeChild(notification), 300);
    }, 2000); // 2 —Å–µ–∫—É–Ω–¥—ã –≤–∏–¥–∏–º–æ—Å—Ç–∏
  }
  
  /******Check*******/

  document.getElementById('checkButton').addEventListener('click', showCheckModal);

  function showCheckModal() {
    const modal = document.getElementById('checkModal');
    const checkPhoneList = document.getElementById('checkPhoneList');
  
    // –°—Ç–∞—Ç–∏—á–Ω—ã–π —Å–ø–∏—Å–æ–∫ –Ω—É–∂–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤
    const fixedNumbers = [
      { number: '78127402640', label: '–ò–±–∏—Å –°–ü–ë' },
      { number: '74956607500', label: '–ò–±–∏—Å –ú–°–ö' },
      { number: '+7 (495) 797-87-16', label: '–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞' },
      { number: '74959999999', label: '–Ø–Ω–¥–µ–∫—Å —Ç–∞–∫—Å–∏' },
      
    ];
  
    checkPhoneList.innerHTML = '';
  
    fixedNumbers.forEach(entry => {
      const div = document.createElement('div');
      div.className = 'modal-phone-item';
      div.innerHTML = `
        <div>
          <strong>${entry.number}</strong> ${entry.label ? `‚Äì ${entry.label}` : ''}
        </div>
        <button onclick="callNumber('${entry.number}')">üìû –ü–æ–∑–≤–æ–Ω–∏—Ç—å</button>
      `;
      checkPhoneList.appendChild(div);
    });
  
    modal.style.display = 'block';
  }
  

function closeCheckModal() {
  document.getElementById('checkModal').style.display = 'none';
}


/*—Ñ—É—Ç–µ—Ä*/

window.addEventListener("DOMContentLoaded", () => {
    const footer = document.getElementById("updateFooter");
    const now = new Date();
  
    const formatted = now.toLocaleString('ru-RU', {
      day: '2-digit',
      month: '2-digit',
      year: 'numeric',
      hour: '2-digit',
      minute: '2-digit'
    });
  
    if (footer) {
      footer.textContent = `–°—Ç—Ä–∞–Ω–∏—Ü–∞ –±—ã–ª–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –≤ ‚Äì ${formatted}`;
    }
  });
  